// (control alt cmd c)

/**
 * This plugin generates an artboard containing color swatches
 * of all used fill and text colors of the current page.
 *
 * Florian Schulz Copyright 2014, MIT License
 */

#import 'inventory.js'
#import 'sketchSelect.js'

(function theFunction() {

    var artboards = null,
        colorArtboard = null,
        color = null,
        cname = null,
        hexColor = null,
        hexColors = [],
        layers = null,
        palettes = [],
        rgbColors = [],
        rma = null,
        styleSheetPage = null;

    // page that the artboard will be created on
    // var styleSheetPage = com.getflourish.common.getPageByName(com.getflourish.config.pageName);
    styleSheetPage = doc.currentPage();

    // the right most artboard
    rma = getRightmostArtboard();

    // dirty hack that will prevent crashes
    // todo: find out why Sketch crashes when a existing artboard is selected
    //com.getflourish.common.removeArtboardFromPage(styleSheetPage, com.getflourish.config.colorInventoryName);

    // artboard that will hold all color swatches
    colorArtboard = com.getflourish.common.getArtboardByPageAndName(styleSheetPage, com.getflourish.config.colorInventoryName);

    // get layers
    layers = doc.currentPage().children().objectEnumerator();

    var layerIsVisible = function(layer){
      var target = layer;
      while(target.parentGroup()){
        if(!target.isVisible()){
          return false;
        }
        target = target.parentGroup();
      }
      return layer.isVisible();
    };

    // loop through all layers
    while (l = layers.nextObject()) {
        if(!layerIsVisible(l)){
            continue;
        }
        try {
            cname = String(l.className());
            if (cname == null) continue;
        } catch (error)Â {
            log("error receiving class name");
        }
        if (cname === "MSShapeGroup") {
            try {
                // the color of the layer
                color = com.getflourish.colors.getColorOf(l);
                if (color == null) {
                    continue;
                }
                try {
                    cname = String(color.className());
                } catch (error) {
                    log("could not receive class name");
                    continue;
                }
                try {
                    if (cname === "MSColor") {
                        try {

                            hexColor = String(color.hexValue());
                            // get classname
                            if(com.getflourish.common.isIncluded(hexColors, hexColor) == 0) {
                                hexColors.push(hexColor);
                                rgbColors.push({
                                    name: "Unnamed Color Swatch",
                                    color: color
                                });
                            }

                        } catch (error) {
                            log("error getting hex code");
                            continue;
                        }
                    }
                } catch (error) {
                    log("could not check if color is included");
                }
            } catch (error) {
                log("oh noes");
            }
        }
    }

    var primaryColors = [];
    // get defined colors, rename existing swatches
    $("MSLayerGroup", colorArtboard).each(function () {

        // check if there are swatches (groups of color swatches)

        colorName = this.name();

        // check if the color swatch has a defined name
        if (this.name().indexOf("Unnamed") == -1) {

            // loop through all child layers to find the color
            var layers = this.layers().array();
            for (var i = 0; i < layers.count(); i++) {

                // get the current layer
                var currentLayer = layers[i];
                if (currentLayer.name().indexOf("Color Swatch") == 0) {
                    hexColor = currentLayer.name().substr(14);

                    var index = hexColors.indexOf("" + hexColor);

                    // check if defined color is still part of the documents colors
                    if (index != -1) {
                        // rename swatch
                        rgbColors[index].name = colorName;
                        var c = rgbColors[index];
                        rgbColors.splice(index, 1);
                        primaryColors.push(c);
                    }
                }
            }
        }
    });

    // only create a color sheet when there are colors

    if (rgbColors.length > 0) {
        palettes.push(rgbColors);
        palettes.push(primaryColors);
        // create colorsheet by passing palettes that contain multiple color objects (name, value)
        com.getflourish.colors.createColorSheet(colorArtboard, palettes);
    }

    // Position the artboard next to the last artboard
    // The actual position that we want is the right edge of the
    // rightmost artboard plus a margin of 100px.

    if(rma.name() != com.getflourish.config.colorInventoryName) {
        var left = rma.frame().width() + rma.frame().x() + 100;
        var top = rma.frame().y();
        colorArtboard.frame().setX(left);
        colorArtboard.frame().setY(top);
    } else {
        var left = rma.frame().x();
        var top = rma.frame().y();
        colorArtboard.frame().setX(left);
        colorArtboard.frame().setY(top);
    }

    bg = com.getflourish.common.addCheckeredBackground(colorArtboard);

    // focus the view on the artboard
    com.getflourish.view.centerTo(colorArtboard);
    doc.currentPage().deselectAllLayers();
    colorArtboard.setIsSelected(true);

    // refresh
    com.getflourish.common.refreshPage();

    // reset variable
    com = null;
    artboards = null;
    colorArtboard = null;
    color = null;
    cname = null;
    hexColor = null;
    hexColors = [];
    layers = null;
    rgbColors = [];
    rma = null;
    styleSheetPage = null;

    /**
     * Returns the x position of the leftmost artboard
     * @return {artboard} artboard
     */
    function getRightmostArtboard() {
      var meta = [];

      // Loop through all artboards of the current page
      for (var i = 0; i < doc.currentPage().artboards().count(); i++) {

        // remember the artboard
        var artboard = doc.currentPage().artboards().objectAtIndex(i);

        // the left position of the artboard
        var left = artboard.frame().x();

        // save properties of the artboard
        meta.push({
          artboard: artboard,
          left: left
        });
      }
      // Sort the artboards by their left position
      meta.sort(sortLeft);

      // Return the rightmost artboard
      var artboard = meta[meta.length-1].artboard;
      return artboard;
    }

    /**
     * Used to sort the left positions of two given layers
     * @param  {layer} a
     * @param  {layer} b
     */
    function sortLeft(a, b) {
        return a.left - b.left;
    }


}());
